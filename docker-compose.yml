services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - cryptobridge-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - cryptobridge-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: cryptobridge-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - cryptobridge-network

  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    restart: always
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    volumes:
      - ./data:/tmp/data
    networks:
      - cryptobridge-network

  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    restart: always
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    volumes:
      - ./data:/tmp/data
    networks:
      - cryptobridge-network

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse
    restart: always
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: cryptobridge
      CLICKHOUSE_USER: analytics
      CLICKHOUSE_PASSWORD: analytics123
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - cryptobridge-network

  # üîß ClickHouse Client (Optional - for interactive queries)
  clickhouse-client:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse-client
    depends_on:
      - clickhouse
    command: >
      sh -c "sleep 30 && clickhouse-client --host clickhouse --port 9000 --database cryptobridge --user analytics --password analytics123 --query 'CREATE DATABASE IF NOT EXISTS cryptobridge' && 
             clickhouse-client --host clickhouse --port 9000 --database cryptobridge --user analytics --password analytics123 --query 'CREATE TABLE IF NOT EXISTS transactions (
               transaction_id String,
               timestamp DateTime64(3),
               from_exchange String,
               to_exchange String,
               amount Float64,
               currency String,
               is_suspicious UInt8,
               risk_score UInt32,
               country String,
               account_type String
             ) ENGINE = MergeTree() 
             PARTITION BY toYYYYMM(timestamp) 
             ORDER BY (timestamp, transaction_id) 
             SETTINGS index_granularity = 8192'"
    networks:
      - cryptobridge-network
    restart: "no"

  # üéØ Init Container to setup HDFS directories
  hdfs-init:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hdfs-init
    depends_on:
      - namenode
      - datanode
    command: >
      bash -c "
        echo 'üöÄ Initializing HDFS directories for CryptoBridge Data Lake...'
        
        # Wait for HDFS to be ready
        sleep 30
        
        # Create Bronze layer directories (Raw Kafka data)
        hdfs dfs -mkdir -p /bronze/transactions/normal
        hdfs dfs -mkdir -p /bronze/transactions/suspicious
        hdfs dfs -mkdir -p /bronze/transactions/fraud_alerts
        hdfs dfs -chmod 755 /bronze/transactions
        
        # Create Silver layer directories (Cleaned/Processed)
        hdfs dfs -mkdir -p /silver/transactions/processed
        hdfs dfs -mkdir -p /silver/transactions/enriched
        hdfs dfs -chmod 755 /silver/transactions
        
        # Create Gold layer directories (Analytics-ready)
        hdfs dfs -mkdir -p /gold/transactions/daily_agg
        hdfs dfs -mkdir -p /gold/analytics/fraud_patterns
        hdfs dfs -mkdir -p /gold/analytics/country_flows
        hdfs dfs -mkdir -p /gold/fraud_detection/alerts
        hdfs dfs -mkdir -p /gold/fraud_detection/models
        hdfs dfs -chmod 755 /gold/transactions
        hdfs dfs -chmod 755 /gold/analytics
        hdfs dfs -chmod 755 /gold/fraud_detection
        
        # Create streaming checkpoint directories
        hdfs dfs -mkdir -p /checkpoint/kafka_streaming
        hdfs dfs -mkdir -p /checkpoint/fraud_detection
        hdfs dfs -mkdir -p /tmp/spark/streaming
        hdfs dfs -chmod 777 /tmp/spark
        hdfs dfs -chmod 755 /checkpoint
        
        echo '‚úÖ HDFS directories created successfully!'
        hdfs dfs -ls /
      "
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    networks:
      - cryptobridge-network
    restart: "no"

  # üìä Metabase Business Intelligence
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    restart: always
    depends_on:
      - clickhouse
      - metabase-db
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: metabase
      MB_DB_PASS: metabase123
      MB_DB_HOST: metabase-db
      MB_JETTY_HOST: 0.0.0.0
      JAVA_TOOL_OPTIONS: -Xmx2g
    volumes:
      - metabase_data:/metabase-data
    networks:
      - cryptobridge-network

  # üóÉÔ∏è PostgreSQL for Metabase metadata
  metabase-db:
    image: postgres:14
    container_name: metabase-db
    restart: always
    environment:
      POSTGRES_DB: metabase
      POSTGRES_USER: metabase
      POSTGRES_PASSWORD: metabase123
    volumes:
      - metabase_postgres_data:/var/lib/postgresql/data
    networks:
      - cryptobridge-network

volumes:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  clickhouse_data:
  clickhouse_logs:
  metabase_data:
  metabase_postgres_data:

networks:
  cryptobridge-network:
    driver: bridge
