version: "3.9"

services:
  spark-master:
    image: apache/spark:3.4.1
    container_name: spark-master
    restart: always
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark-config:/spark/conf
      - ./data:/data
      - ./jars:/jars
      - ./airflow/scripts:/scripts
    networks:
      - cryptobridge-network

  spark-worker:
    image: apache/spark:3.4.1
    container_name: spark-worker
    restart: always
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark-config:/spark/conf
      - ./data:/data
      - ./jars:/jars
      - ./airflow/scripts:/scripts
    networks:
      - cryptobridge-network

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse
    restart: always
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: cryptobridge
      CLICKHOUSE_USER: analytics
      CLICKHOUSE_PASSWORD: analytics123
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server
    networks:
      - cryptobridge-network

  airflow-webserver:
    image: apache/airflow:2.7.1
    container_name: airflow-webserver
    command: webserver
    restart: always
    ports:
      - "8089:8080"   # changed from 8090 to 8089 to avoid conflict
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/scripts:/opt/airflow/scripts
      - ./data:/data
    depends_on:
      - airflow-postgres
    networks:
      - cryptobridge-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    image: apache/airflow:2.7.1
    container_name: airflow-scheduler
    command: scheduler
    restart: always
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/scripts:/opt/airflow/scripts
      - ./data:/data
    depends_on:
      - airflow-postgres
    networks:
      - cryptobridge-network

  airflow-postgres:
    image: postgres:13
    container_name: airflow-postgres
    restart: always
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    networks:
      - cryptobridge-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 30s
      timeout: 10s
      retries: 3
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  # üîß ClickHouse Client (Optional - for interactive queries)
  clickhouse-client:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse-client
    depends_on:
      - clickhouse
    command: >
      sh -c "sleep 30 && clickhouse-client --host clickhouse --port 9000 --database cryptobridge --user analytics --password analytics123 --query 'CREATE DATABASE IF NOT EXISTS cryptobridge' && 
             clickhouse-client --host clickhouse --port 9000 --database cryptobridge --user analytics --password analytics123 --query 'CREATE TABLE IF NOT EXISTS transactions (
               transaction_id String,
               timestamp DateTime64(3),
               from_exchange String,
               to_exchange String,
               amount Float64,
               currency String,
               is_suspicious UInt8,
               risk_score UInt32,
               country String,
               account_type String
             ) ENGINE = MergeTree() 
             PARTITION BY toYYYYMM(timestamp) 
             ORDER BY (timestamp, transaction_id) 
             SETTINGS index_granularity = 8192'"
    networks:
      - cryptobridge-network
    restart: "no"

  # üéØ Init Container to setup HDFS directories
  hdfs-init:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hdfs-init
    depends_on:
      - namenode
      - datanode
    command: >
      bash -c "
        echo 'üöÄ Initializing HDFS directories for CryptoBridge Data Lake...'
        
        # Wait for HDFS to be ready
        sleep 30
        
        # Create Bronze layer directories (Raw Kafka data)
        hdfs dfs -mkdir -p /bronze/transactions/normal
        hdfs dfs -mkdir -p /bronze/transactions/suspicious
        hdfs dfs -mkdir -p /bronze/transactions/fraud_alerts
        hdfs dfs -chmod 755 /bronze/transactions
        
        # Create Silver layer directories (Cleaned/Processed)
        hdfs dfs -mkdir -p /silver/transactions/processed
        hdfs dfs -mkdir -p /silver/transactions/enriched
        hdfs dfs -chmod 755 /silver/transactions
        
        # Create Gold layer directories (Analytics-ready)
        hdfs dfs -mkdir -p /gold/transactions/daily_agg
        hdfs dfs -mkdir -p /gold/analytics/fraud_patterns
        hdfs dfs -mkdir -p /gold/analytics/country_flows
        hdfs dfs -mkdir -p /gold/fraud_detection/alerts
        hdfs dfs -mkdir -p /gold/fraud_detection/models
        hdfs dfs -chmod 755 /gold/transactions
        hdfs dfs -chmod 755 /gold/analytics
        hdfs dfs -chmod 755 /gold/fraud_detection
        
        # Create streaming checkpoint directories
        hdfs dfs -mkdir -p /checkpoint/kafka_streaming
        hdfs dfs -mkdir -p /checkpoint/fraud_detection
        hdfs dfs -mkdir -p /tmp/spark/streaming
        hdfs dfs -chmod 777 /tmp/spark
        hdfs dfs -chmod 755 /checkpoint
        
        echo '‚úÖ HDFS directories created successfully!'
        hdfs dfs -ls /
      "
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    networks:
      - cryptobridge-network
    restart: "no"

  # üìä Metabase Business Intelligence
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    restart: always
    depends_on:
      - clickhouse
      - metabase-db
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: metabase
      MB_DB_PASS: metabase123
      MB_DB_HOST: metabase-db
      MB_JETTY_HOST: 0.0.0.0
      JAVA_TOOL_OPTIONS: -Xmx2g
    volumes:
      - metabase_data:/metabase-data
    networks:
      - cryptobridge-network

  # üóÉÔ∏è PostgreSQL for Metabase metadata
  metabase-db:
    image: postgres:14
    container_name: metabase-db
    restart: always
    environment:
      POSTGRES_DB: metabase
      POSTGRES_USER: metabase
      POSTGRES_PASSWORD: metabase123
    volumes:
      - metabase_postgres_data:/var/lib/postgresql/data
    networks:
      - cryptobridge-network

volumes:
  clickhouse_data:
  clickhouse_logs:
  metabase_data:
  metabase_postgres_data:

networks:
  cryptobridge-network:
    driver: bridge
