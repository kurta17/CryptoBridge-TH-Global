# üöÄ CryptoBridge Data Lake - Docker Compose
# üåä Local HDFS and Big Data Stack for Development

services:
  # üêò Zookeeper (Required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - cryptobridge-net

  # üöÄ Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_BYTES: 10737418240
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - cryptobridge-net

  # üìä Kafka UI (Optional - for monitoring)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: cryptobridge-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - cryptobridge-net

  # üêò Hadoop Namenode
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - "9870:9870"  # Namenode web UI
      - "9001:9000"  # HDFS port (changed to avoid conflict with ClickHouse)
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=cryptobridge-cluster
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - CORE_CONF_hadoop_http_staticuser_user=root
      - CORE_CONF_hadoop_proxyuser_hue_hosts=*
      - CORE_CONF_hadoop_proxyuser_hue_groups=*
      - CORE_CONF_io_compression_codecs=org.apache.hadoop.io.compress.SnappyCodec
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
      - HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check=false
    networks:
      - cryptobridge-net

  # üóÉÔ∏è Hadoop Datanode
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      CORE_CONF_hadoop_proxyuser_hue_hosts: "*"
      CORE_CONF_hadoop_proxyuser_hue_groups: "*"
      CORE_CONF_io_compression_codecs: org.apache.hadoop.io.compress.SnappyCodec
      HDFS_CONF_dfs_webhdfs_enabled: "true"
      HDFS_CONF_dfs_permissions_enabled: "false"
      HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check: "false"
    ports:
      - "9864:9864"  # Datanode web UI
    networks:
      - cryptobridge-net

  # üìä Resource Manager
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
      YARN_CONF_yarn_log___aggregation___enable: "true"
      YARN_CONF_yarn_log_server_url: "http://historyserver:8188/applicationhistory/logs/"
      YARN_CONF_yarn_resourcemanager_recovery_enabled: "true"
      YARN_CONF_yarn_resourcemanager_store_class: org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore
      YARN_CONF_yarn_resourcemanager_scheduler_class: org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler
      YARN_CONF_yarn_scheduler_capacity_root_default_maximum___allocation___mb: "8192"
      YARN_CONF_yarn_scheduler_capacity_root_default_maximum___allocation___vcores: "4"
      YARN_CONF_yarn_resourcemanager_fs_state___store_uri: /rmstate
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      YARN_CONF_yarn_resourcemanager_address: resourcemanager:8032
      YARN_CONF_yarn_resourcemanager_scheduler_address: resourcemanager:8030
      YARN_CONF_yarn_resourcemanager_resource__tracker_address: resourcemanager:8031
    ports:
      - "8088:8088"  # ResourceManager web UI
    volumes:
      - hadoop_resourcemanager:/rmstate
    networks:
      - cryptobridge-net

  # ‚ö° Spark Master
  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    restart: always
    ports:
      - "8080:8080"  # Spark Master web UI
      - "7077:7077"  # Spark Master port
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - ./data:/tmp/data  # Mount local data directory
    networks:
      - cryptobridge-net

  # ‚ö° Spark Worker
  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    restart: always
    depends_on:
      - spark-master
    ports:
      - "8081:8081"  # Spark Worker web UI
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - ./data:/tmp/data
    networks:
      - cryptobridge-net

  # ÔøΩ ClickHouse Analytics Database
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse
    restart: always
    ports:
      - "8123:8123"  # HTTP Interface
      - "9000:9000"   # Native Interface
    environment:
      CLICKHOUSE_DB: cryptobridge
      CLICKHOUSE_USER: analytics
      CLICKHOUSE_PASSWORD: analytics123
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - cryptobridge-net

  # üîß ClickHouse Client (Optional - for interactive queries)
  clickhouse-client:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse-client
    depends_on:
      - clickhouse
    command: >
      sh -c "sleep 30 && clickhouse-client --host clickhouse --port 9000 --database cryptobridge --user analytics --password analytics123 --query 'CREATE DATABASE IF NOT EXISTS cryptobridge' && 
             clickhouse-client --host clickhouse --port 9000 --database cryptobridge --user analytics --password analytics123 --query 'CREATE TABLE IF NOT EXISTS transactions (
               transaction_id String,
               timestamp DateTime64(3),
               from_exchange String,
               to_exchange String,
               amount Float64,
               currency String,
               is_suspicious UInt8,
               risk_score UInt32,
               country String,
               account_type String
             ) ENGINE = MergeTree() 
             PARTITION BY toYYYYMM(timestamp) 
             ORDER BY (timestamp, transaction_id) 
             SETTINGS index_granularity = 8192'"
    networks:
      - cryptobridge-net
    restart: "no"

  # üéØ Init Container to setup HDFS directories
  hdfs-init:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hdfs-init
    depends_on:
      - namenode
      - datanode
    command: >
      bash -c "
        echo 'üöÄ Initializing HDFS directories for CryptoBridge Data Lake...'
        
        # Wait for HDFS to be ready
        sleep 30
        
        # Create Bronze layer directories (Raw Kafka data)
        hdfs dfs -mkdir -p /bronze/transactions/normal
        hdfs dfs -mkdir -p /bronze/transactions/suspicious
        hdfs dfs -mkdir -p /bronze/transactions/fraud_alerts
        hdfs dfs -chmod 755 /bronze/transactions
        
        # Create Silver layer directories (Cleaned/Processed)
        hdfs dfs -mkdir -p /silver/transactions/processed
        hdfs dfs -mkdir -p /silver/transactions/enriched
        hdfs dfs -chmod 755 /silver/transactions
        
        # Create Gold layer directories (Analytics-ready)
        hdfs dfs -mkdir -p /gold/transactions/daily_agg
        hdfs dfs -mkdir -p /gold/analytics/fraud_patterns
        hdfs dfs -mkdir -p /gold/analytics/country_flows
        hdfs dfs -mkdir -p /gold/fraud_detection/alerts
        hdfs dfs -mkdir -p /gold/fraud_detection/models
        hdfs dfs -chmod 755 /gold/transactions
        hdfs dfs -chmod 755 /gold/analytics
        hdfs dfs -chmod 755 /gold/fraud_detection
        
        # Create streaming checkpoint directories
        hdfs dfs -mkdir -p /checkpoint/kafka_streaming
        hdfs dfs -mkdir -p /checkpoint/fraud_detection
        hdfs dfs -mkdir -p /tmp/spark/streaming
        hdfs dfs -chmod 777 /tmp/spark
        hdfs dfs -chmod 755 /checkpoint
        
        echo '‚úÖ HDFS directories created successfully!'
        hdfs dfs -ls /
      "
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    networks:
      - cryptobridge-net
    restart: "no"

volumes:
  # üöÄ Kafka & Zookeeper
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  
  # üêò Hadoop
  hadoop_namenode:
  hadoop_datanode:
  hadoop_resourcemanager:
  
  # ÔøΩ ClickHouse Analytics
  clickhouse_data:
  clickhouse_logs:
  
  # üìä Jupyter
  jupyter_data:

networks:
  cryptobridge-net:
    driver: bridge
    name: cryptobridge-network